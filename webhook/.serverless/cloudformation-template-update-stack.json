{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "WebhooksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/logistics-webhooks-local-webhooks"
      }
    },
    "ProcessorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/logistics-webhooks-local-processor"
      }
    },
    "TmsPollerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/logistics-webhooks-local-tmsPoller"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "logistics-webhooks",
                  "local",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/logistics-webhooks-local*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/logistics-webhooks-local*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "IngestQueue",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "EventIdempotencyTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DriverStateTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "RoutesTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "IngestQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "logistics-webhooks",
              "local",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "WebhooksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-37398299-02eb",
          "S3Key": "serverless/logistics-webhooks/local/1755605983046-2025-08-19T12:19:43.046Z/logistics-webhooks.zip"
        },
        "Handler": "src/app.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "logistics-webhooks-local-webhooks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Architectures": [
          "x86_64"
        ],
        "Environment": {
          "Variables": {
            "NODE_OPTIONS": "--enable-source-maps",
            "SQS_QUEUE_URL": {
              "Ref": "IngestQueue"
            },
            "EVENT_TABLE": "logistics-webhooks-event-idempotency",
            "DRIVER_STATE_TABLE": "logistics-webhooks-driver-state",
            "ROUTES_TABLE": "logistics-webhooks-routes",
            "SIM_API_BASE": "http://host.docker.internal:4001",
            "POLLER_CONCURRENCY": "8",
            "EVENT_BUS_NAME": "logistics-webhooks-bus",
            "HMAC_SECRET_GPS": "localdev",
            "STAGE": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebhooksLogGroup"
      ]
    },
    "ProcessorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-37398299-02eb",
          "S3Key": "serverless/logistics-webhooks/local/1755605983046-2025-08-19T12:19:43.046Z/logistics-webhooks.zip"
        },
        "Handler": "src/processor.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "logistics-webhooks-local-processor",
        "MemorySize": 1024,
        "Timeout": 6,
        "Architectures": [
          "x86_64"
        ],
        "Environment": {
          "Variables": {
            "NODE_OPTIONS": "--enable-source-maps",
            "SQS_QUEUE_URL": {
              "Ref": "IngestQueue"
            },
            "EVENT_TABLE": "logistics-webhooks-event-idempotency",
            "DRIVER_STATE_TABLE": "logistics-webhooks-driver-state",
            "ROUTES_TABLE": "logistics-webhooks-routes",
            "SIM_API_BASE": "http://host.docker.internal:4001",
            "POLLER_CONCURRENCY": "8",
            "EVENT_BUS_NAME": "logistics-webhooks-bus",
            "HMAC_SECRET_GPS": "localdev",
            "STAGE": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProcessorLogGroup"
      ]
    },
    "TmsPollerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-37398299-02eb",
          "S3Key": "serverless/logistics-webhooks/local/1755605983046-2025-08-19T12:19:43.046Z/logistics-webhooks.zip"
        },
        "Handler": "src/poller.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "logistics-webhooks-local-tmsPoller",
        "MemorySize": 1024,
        "Timeout": 30,
        "Architectures": [
          "x86_64"
        ],
        "Environment": {
          "Variables": {
            "NODE_OPTIONS": "--enable-source-maps",
            "SQS_QUEUE_URL": {
              "Ref": "IngestQueue"
            },
            "EVENT_TABLE": "logistics-webhooks-event-idempotency",
            "DRIVER_STATE_TABLE": "logistics-webhooks-driver-state",
            "ROUTES_TABLE": "logistics-webhooks-routes",
            "SIM_API_BASE": "http://host.docker.internal:4001",
            "POLLER_CONCURRENCY": "8",
            "EVENT_BUS_NAME": "logistics-webhooks-bus",
            "HMAC_SECRET_GPS": "localdev",
            "STAGE": "local"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TmsPollerLogGroup"
      ]
    },
    "WebhooksLambdaVersionjkTxadoPLI0FZmPE0h3OSmmAR9J9ErKgMdmYCpnjI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebhooksLambdaFunction"
        },
        "CodeSha256": "ICco28DieJoNWyoLGmk7xgXZvtyUfq9FE6Oym1s0ZIE="
      }
    },
    "ProcessorLambdaVersionZ0OtHuy8ayBPD7I6zbh91vZMi3RrKBm4m9ELxJw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessorLambdaFunction"
        },
        "CodeSha256": "ICco28DieJoNWyoLGmk7xgXZvtyUfq9FE6Oym1s0ZIE="
      }
    },
    "TmsPollerLambdaVersionzGc84HkR6pnAFvMR291bChhK2BBdmEuwQs8c85Hqy4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TmsPollerLambdaFunction"
        },
        "CodeSha256": "ICco28DieJoNWyoLGmk7xgXZvtyUfq9FE6Oym1s0ZIE="
      }
    },
    "TmsPollerEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(2 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "TmsPollerLambdaFunction",
                "Arn"
              ]
            },
            "Id": "tmsPollerSchedule"
          }
        ]
      }
    },
    "TmsPollerLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TmsPollerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TmsPollerEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "logistics-webhooks-local",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProxyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProxyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WebhooksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WebhooksLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodProxyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProxyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WebhooksLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WebhooksLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1755605974666": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "local"
      },
      "DependsOn": [
        "ApiGatewayMethodOptions",
        "ApiGatewayMethodProxyVarOptions",
        "ApiGatewayMethodAny",
        "ApiGatewayMethodProxyVarAny"
      ]
    },
    "WebhooksLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebhooksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ProcessorEventSourceMappingSQSIngestQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 5,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "IngestQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ProcessorLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "IngestDLQ": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "logistics-webhooks-dlq",
        "MessageRetentionPeriod": 1209600
      }
    },
    "IngestQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "logistics-webhooks-ingest",
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "IngestDLQ",
              "Arn"
            ]
          },
          "maxReceiveCount": 5
        }
      }
    },
    "EventIdempotencyTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "logistics-webhooks-event-idempotency",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "eventId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "eventId",
            "KeyType": "HASH"
          }
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "DriverStateTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "logistics-webhooks-driver-state",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "driverId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "driverId",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "RoutesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "logistics-webhooks-routes",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "routeId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "routeId",
            "KeyType": "HASH"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-37398299-02eb",
      "Export": {
        "Name": "sls-logistics-webhooks-local-ServerlessDeploymentBucketName"
      }
    },
    "WebhooksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebhooksLambdaVersionjkTxadoPLI0FZmPE0h3OSmmAR9J9ErKgMdmYCpnjI"
      },
      "Export": {
        "Name": "sls-logistics-webhooks-local-WebhooksLambdaFunctionQualifiedArn"
      }
    },
    "ProcessorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessorLambdaVersionZ0OtHuy8ayBPD7I6zbh91vZMi3RrKBm4m9ELxJw"
      },
      "Export": {
        "Name": "sls-logistics-webhooks-local-ProcessorLambdaFunctionQualifiedArn"
      }
    },
    "TmsPollerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TmsPollerLambdaVersionzGc84HkR6pnAFvMR291bChhK2BBdmEuwQs8c85Hqy4"
      },
      "Export": {
        "Name": "sls-logistics-webhooks-local-TmsPollerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/local"
          ]
        ]
      },
      "Export": {
        "Name": "sls-logistics-webhooks-local-ServiceEndpoint"
      }
    },
    "RestApiId": {
      "Value": {
        "Ref": "ApiGatewayRestApi"
      }
    }
  }
}